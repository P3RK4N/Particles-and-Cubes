// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel MockInit
#pragma kernel MockTick
#pragma kernel MockEmit

#define CPS_GROUP_SIZE           32
#define CPS_MAX_FORCEFIELD_COUNT 10

static const int LOCAL_SPACE        = 0;
static const int GLOBAL_SPACE       = 1;

static const int RENDER_BILLBOARD   = 0;
static const int RENDER_POINT       = 1;
static const int RENDER_MESH        = 2;

static const int SCALAR_EXACT       = 0;
static const int SCALAR_RANGED      = 1;
static const int SCALAR_GAUSSIAN    = 2;

static const int FUNCTION_POINT     = 0;
static const int FUNCTION_SPHERE    = 1;
static const int FUNCTION_PLANE     = 2;
static const int FUNCTION_CUBOID    = 3;

static const int FALLOFF_ROOT       = 0;
static const int FALLOFF_LINEAR     = 1;
static const int FALLOFF_QUADRATIC  = 2;
static const int FALLOFF_CUBOID     = 3;

struct SimulationState
{
    float3  Position;
    float3  StartScale;
    float3  EndScale;
    float3  Rotation;
    float3  RotationOverTime;
    float3  Velocity;
    float3  ExternalVelocity;
    float3  StartColour;
    float3  EndColour;
    float2  Current_Max_Life;
    int2    SimSpace_RendType;
};

RWStructuredBuffer<SimulationState> SimulationStateBuffer;

cbuffer GlobalState
{
    // Settings Stuff
    int Seed;
    int SimulationSpace;
    int RenderType;
    
    // Kernel Stuff
    int DISPATCH_NUM;
    int MAX_PARTICLE_COUNT;

    // Time Stuff
    float DeltaTime;
    float Time;

    // Environment Stuff
    float3 EmitterPositionWS;
    float GravityForce;
    float DragForce;
    
    // Lifetime
    int LifetimeScalarType;
    float ExactLifetime;
    float BottomLifetime;
    float TopLifetime;

    // Position
    int PositionFunctionType;
    float3 CenterOffset;
    float Radius;
    
    // Velocity
    int VelocityScalarType;
    float3 ExactVelocity;
    float3 BottomVelocity;
    float3 TopVelocity;
    
    // Scale
    int StartScaleScalarType;
    int UniformStartScale;
    float3 ExactStartScale;
    float3 BottomStartScale;
    float3 TopStartScale;
    int UseEndScale;
    int EndScaleScalarType;
    int UniformEndScale;
    float3 ExactEndScale;
    float3 BottomEndScale;
    float3 TopEndScale;
    
    // Rotation
    int RotationScalarType;
    float3 ExactRotation;
    float3 BottomRotation;
    float3 TopRotation;
    int RotationOverTimeScalarType;
    float3 ExactRotationOverTime;
    float3 BottomRotationOverTime;
    float3 TopRotationOverTime;
    
    // Colour
    int StartColourScalarType;
    float3 ExactStartColour;
    float3 BottomStartColour;
    float3 TopStartColour;
    int UseEndColour;
    int EndColourScalarType;
    int UniformEndColour;
    float3 ExactEndColour;
    float3 BottomEndColour;
    float3 TopEndColour;
};

// FORCE FIELDS
uniform int     UseForceFields;
uniform int     ForceFieldsCount;
uniform int     ForceFieldTypes                  [CPS_MAX_FORCEFIELD_COUNT];
uniform int     ForceFieldGeneratorTypes         [CPS_MAX_FORCEFIELD_COUNT];
uniform float   ForceFieldIntensities            [CPS_MAX_FORCEFIELD_COUNT];
uniform float4  ForceFieldGeneratorCenterOffsets [CPS_MAX_FORCEFIELD_COUNT];

// VECTOR FIELDS
uniform int     UseVectorField;
uniform float   VectorFieldFrequency;
uniform float   VectorFieldIntensity;

// BUFFERS
RWStructuredBuffer<int>  CurrentParticleCountBuffer;
RWStructuredBuffer<int>  EmissionAmountCounterBuffer;

// STATIC DATA
static const float FalloffPowers[4] = { 0.5, 1, 2, 3 };

/*
    ##############################################################
    ####################### RNG STUFF ############################
    ##############################################################
*/

#ifndef CPS_SHADERTOY_HASH_FUNCTIONS
#define CPS_SHADERTOY_HASH_FUNCTIONS

/*
    Hash Functions for GPU Rendering
    https://www.shadertoy.com/view/XlGcRh
*/

// commonly used constants
#define c1 0xcc9e2d51u
#define c2 0x1b873593u

// Helper Functions
uint rotl(uint x, uint r)
{
    return (x << r) | (x >> (32u - r));
}

uint rotr(uint x, uint r)
{
    return (x >> r) | (x << (32u - r));
}

// UE4's RandFast function
// https://github.com/EpicGames/UnrealEngine/blob/release/Engine/Shaders/Private/Random.ush
float RandFast(float2 v)
{
    v = (1. / 4320.) * v + float2(0.25, 0.);
    float state = frac(dot(v * v, float2(3571, 3571)));
    return frac(state * state * (3571. * 2.));
}

// Hash without Sine
// https://www.shadertoy.com/view/4djSRW
float HashNoSine11(float p)
{
    p = frac(p * .1031);
    p *= p + 33.33;
    p *= p + p;
    return frac(p);
}

float HashNoSine12(float2 p)
{
    float3 p3 = frac(float3(p.xyx) * .1031);
    p3 += dot(p3, p3.yzx + 33.33);
    return frac((p3.x + p3.y) * p3.z);
}

float HashNoSine13(float3 p3)
{
    p3 = frac(p3 * .1031);
    p3 += dot(p3, p3.yzx + 33.33);
    return frac((p3.x + p3.y) * p3.z);
}

float2 HashNoSine21(float p)
{
    float3 p3 = frac(float3(p, p, p) * float3(.1031, .1030, .0973));
    p3 += dot(p3, p3.yzx + 33.33);
    return frac((p3.xx + p3.yz) * p3.zy);
}

float2 HashNoSine22(float2 p)
{
    float3 p3 = frac(float3(p.xyx) * float3(.1031, .1030, .0973));
    p3 += dot(p3, p3.yzx + 33.33);
    return frac((p3.xx + p3.yz) * p3.zy);
}

float2 HashNoSine23(float3 p3)
{
    p3 = frac(p3 * float3(.1031, .1030, .0973));
    p3 += dot(p3, p3.yzx + 33.33);
    return frac((p3.xx + p3.yz) * p3.zy);
}

float3 HashNoSine31(float p)
{
    float3 p3 = frac(float3(p, p, p) * float3(.1031, .1030, .0973));
    p3 += dot(p3, p3.yzx + 33.33);
    return frac((p3.xxy + p3.yzz) * p3.zyx);
}

float3 HashNoSine32(float2 p)
{
    float3 p3 = frac(float3(p.xyx) * float3(.1031, .1030, .0973));
    p3 += dot(p3, p3.yxz + 33.33);
    return frac((p3.xxy + p3.yzz) * p3.zyx);
}

float3 HashNoSine33(float3 p3)
{
    p3 = frac(p3 * float3(.1031, .1030, .0973));
    p3 += dot(p3, p3.yxz + 33.33);
    return frac((p3.xxy + p3.yxx) * p3.zyx);
}

float4 HashNoSine41(float p)
{
    float4 p4 = frac(float4(p, p, p, p) * float4(.1031, .1030, .0973, .1099));
    p4 += dot(p4, p4.wzxy + 33.33);
    return frac((p4.xxyz + p4.yzzw) * p4.zywx);
}

float4 HashNoSine42(float2 p)
{
    float4 p4 = frac(float4(p.xyxy) * float4(.1031, .1030, .0973, .1099));
    p4 += dot(p4, p4.wzxy + 33.33);
    return frac((p4.xxyz + p4.yzzw) * p4.zywx);
}

float4 HashNoSine43(float3 p)
{
    float4 p4 = frac(float4(p.xyzx) * float4(.1031, .1030, .0973, .1099));
    p4 += dot(p4, p4.wzxy + 33.33);
    return frac((p4.xxyz + p4.yzzw) * p4.zywx);
}

float4 HashNoSine44(float4 p4)
{
    p4 = frac(p4 * float4(.1031, .1030, .0973, .1099));
    p4 += dot(p4, p4.wzxy + 33.33);
    return frac((p4.xxyz + p4.yzzw) * p4.zywx);
}

// Integer Hash - III
// - Inigo Quilez, Integer Hash - III, 2017
//   https://www.shadertoy.com/view/4tXyWN
uint IntHash(uint2 x)
{
    uint2 q = 1103515245U * ((x >> 1U) ^ (x.yx));
    uint n = 1103515245U * ((q.x) ^ (q.y >> 3U));

    return n;
}

// Integer Hash - I
// - Inigo Quilez, Integer Hash - I, 2017
//   https://www.shadertoy.com/view/llGSzw
uint IntHash(uint n)
{
    // integer hash copied from Hugo Elias
    n = (n << 13U) ^ n;
    n = n * (n * n * 15731U + 789221U) + 1376312589U;

    return n;
}

// Interleaved Gradient Noise
//  - Jimenez, Next Generation Post Processing in Call of Duty: Advanced Warfare
//    Advances in Real-time Rendering, SIGGRAPH 2014
float InterleavedGradientNoise(float2 v)
{
    float3 magic = float3(0.06711056, 0.00583715, 52.9829189);
    return frac(magic.z * frac(dot(v, magic.xy)));
}

// ############################################################

// hash based 3d value noise
// function taken from https://www.shadertoy.com/view/XslGRr
// Created by inigo quilez - iq/2013
// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.

// ported from GLSL to HLSL

float __hash(float n)
{
    return frac(sin(n) * 43758.5453);
}

float SimplexNoise(float3 x)
{
    // The noise function returns a value in the range -1.0f -> 1.0f

    float3 p = floor(x);
    float3 f = frac(x);

    f = f * f * (3.0 - 2.0 * f);
    float n = p.x + p.y * 57.0 + 113.0 * p.z;

    return lerp(lerp(lerp(__hash(n + 0.0), __hash(n + 1.0), f.x),
                   lerp(__hash(n + 57.0), __hash(n + 58.0), f.x), f.y),
               lerp(lerp(__hash(n + 113.0), __hash(n + 114.0), f.x),
                   lerp(__hash(n + 170.0), __hash(n + 171.0), f.x), f.y), f.z);
}

// ########################################################

float4 permute(float4 t)
{
    return t * (t * 34.0 + 133.0);
}

// https://stackoverflow.com/questions/7610631/glsl-mod-vs-hlsl-fmod
float mod(float x, float y)
{
    return x - y * floor(x / y);
}

float2 mod(float2 x, float2 y)
{
    return x - y * floor(x / y);
}

float3 mod(float3 x, float3 y)
{
    return x - y * floor(x / y);
}

float4 mod(float4 x, float4 y)
{
    return x - y * floor(x / y);
}

// Gradient set is a normalized expanded rhombic dodecahedron
float3 grad(float hash)
{
	// Random vertex of a cube, +/- 1 each
    float3 cube = mod(floor(hash / float3(1.0, 2.0, 4.0)), 2.0) * 2.0 - 1.0;

	// Random edge of the three edges connected to that vertex
	// Also a cuboctahedral vertex
	// And corresponds to the face of its dual, the rhombic dodecahedron
    float3 cuboct = cube;

    int index = int(hash / 16.0);

    if (index == 0)
        cuboct.x = 0.0;
    else if (index == 1)
        cuboct.y = 0.0;
    else
        cuboct.z = 0.0;

	// In a funky way, pick one of the four points on the rhombic face
    float type = mod(floor(hash / 8.0), 2.0);
    float3 rhomb = (1.0 - type) * cube + type * (cuboct + cross(cube, cuboct));

	// Expand it so that the new edges are the same length
	// as the existing ones
    float3 grad = cuboct * 1.22474487139 + rhomb;

	// To make all gradients the same length, we only need to shorten the
	// second type of vector. We also put in the whole noise scale constant.
	// The compiler should reduce it into the existing floats. I think.
    grad *= (1.0 - 0.042942436724648037 * type) * 32.80201376986577;

    return grad;
}

// BCC lattice split up into 2 cube lattices
float4 openSimplex2Base(float3 X)
{
	// First half-lattice, closest edge
    float3 v1 = round(X);
    float3 d1 = X - v1;
    float3 score1 = abs(d1);
    float3 dir1 = step(max(score1.yzx, score1.zxy), score1);
    float3 v2 = v1 + dir1 * sign(d1);
    float3 d2 = X - v2;

	// Second half-lattice, closest edge
    float3 X2 = X + 144.5;
    float3 v3 = round(X2);
    float3 d3 = X2 - v3;
    float3 score2 = abs(d3);
    float3 dir2 = step(max(score2.yzx, score2.zxy), score2);
    float3 v4 = v3 + dir2 * sign(d3);
    float3 d4 = X2 - v4;

	// Gradient hashes for the four points, two from each half-lattice
    float4 hashes = permute(mod(float4(v1.x, v2.x, v3.x, v4.x), 289.0));
    hashes = permute(mod(hashes + float4(v1.y, v2.y, v3.y, v4.y), 289.0));
    hashes = mod(permute(mod(hashes + float4(v1.z, v2.z, v3.z, v4.z), 289.0)), 48.0);

	// Gradient extrapolations & kernel function
    float4 a = max(0.5 - float4(dot(d1, d1), dot(d2, d2), dot(d3, d3), dot(d4, d4)), 0.0);
    float4 aa = a * a;
    float4 aaaa = aa * aa;
    float3 g1 = grad(hashes.x);
    float3 g2 = grad(hashes.y);
    float3 g3 = grad(hashes.z);
    float3 g4 = grad(hashes.w);
    float4 extrapolations = float4(dot(d1, g1), dot(d2, g2), dot(d3, g3), dot(d4, g4));

    float4x3 derivativeMatrix = { d1, d2, d3, d4 };
    float4x3 gradientMatrix = { g1, g2, g3, g4 };

	// Derivatives of the noise
    float3 derivative = -8.0 * mul(aa * a * extrapolations, derivativeMatrix)
		+ mul(aaaa, gradientMatrix);

	// Return it all as a float4
    return float4(derivative, dot(aaaa, extrapolations));
}

// ########################################################

// UE4's PseudoRandom function
// https://github.com/EpicGames/UnrealEngine/blob/release/Engine/Shaders/Private/Random.ush
float PseudoHash(float2 v)
{
    v = frac(v / 128.) * 128. + float2(-64.340622, -72.465622);
    return frac(dot(v.xyx * v.xyy, float3(20.390625, 60.703125, 2.4281209)));
}

// Modified RAND_VEC on unit sphere: https://www.shadertoy.com/view/3djyWW
const float PI = 3.141592653;
#define FK(k) asuint(cos(k))^asuint(k)
float hash(float2 uv)
{
    int x = FK(uv.x);
    int y = FK(uv.y);
    return float((x * x + y) * (y * y - x) + x) / 2.14e9;
}

float3 randvec(float seed)
{
    float h1 = hash(float2(seed, seed));
    float h2 = hash(float2(h1, seed));
    float h3 = hash(float2(h2, seed));
    return normalize(float3(h1, h2, h3));
}

#endif

/*
    ##############################################################
    ##################### COMPUTE STUFF ##########################
    ##############################################################
*/

#ifndef CPS_RNG_UTILITY
#define CPS_RNG_UTILITY

float3 RandomRange(in float3 prev, in float3 bottom, in float3 top, in uint ID, in bool isUniform)
{
    float3 diff = top - bottom;
    return bottom +
           diff *
           (
                isUniform ?
                    HashNoSine13(float3(prev + ID * Time + Seed)) :
                    HashNoSine33(float3(prev + ID * Time + Seed))
            );
}

float RandomRange(in float prev, in float bottom, in float top, in uint ID)
{
    float diff = top - bottom;
    return bottom + diff * HashNoSine13(float3(prev, ID * Time, Seed));
}

float3 RandomVector(in float3 prev, in uint ID)
{
    return normalize(HashNoSine33(float3(prev + Time * ID + Seed)) - 0.5);

}

#endif


#ifndef CPS_PARTICLE_RESET
#define CPS_PARTICLE_RESET

void ResetScale(uint ID)
{
    if(StartScaleScalarType == SCALAR_EXACT)
    {
        SimulationStateBuffer[ID].StartScale = ExactStartScale;
    }
    else if(StartScaleScalarType == SCALAR_RANGED)
    {
        SimulationStateBuffer[ID].StartScale = RandomRange(SimulationStateBuffer[ID].StartScale, BottomStartScale, TopStartScale, ID, UniformStartScale);
    }
    else
    {
        // TODO
    }
    
    if(UseEndScale == 0) return;

    if(EndScaleScalarType == SCALAR_EXACT)
    {
        SimulationStateBuffer[ID].EndScale = ExactEndScale;
    }
    else if (EndScaleScalarType == SCALAR_RANGED)
    {
        SimulationStateBuffer[ID].EndScale = RandomRange(SimulationStateBuffer[ID].EndScale, BottomEndScale, TopEndScale, ID, UniformEndScale);
    }
    else
    {
        // TODO
    }
    
}

void ResetPosition(uint ID)
{
    float3 prev = SimulationStateBuffer[ID].Position;
    float3 newPosition = CenterOffset + (SimulationSpace * EmitterPositionWS);
                                        /* Zero if SimulationSpace == Local */

    if(PositionFunctionType == FUNCTION_POINT)
    {
        /* NOP */
    }
    else if(PositionFunctionType == FUNCTION_SPHERE)
    {
        newPosition += RandomVector(prev, ID) * Radius * HashNoSine13(prev + ID);
                       /* Offset From Middle of sphere at [0-Radius] */
    }
    else
    {
        // TODO
    }
    
    SimulationStateBuffer[ID].Position = newPosition;
}

void ResetRotation(uint ID)
{
    if(RenderType != RENDER_MESH) return;
    
    if(RotationScalarType == SCALAR_EXACT)
    {
        SimulationStateBuffer[ID].Rotation = ExactRotation;
    }
    else if(RotationScalarType == SCALAR_RANGED)
    {
        SimulationStateBuffer[ID].Rotation = RandomRange(SimulationStateBuffer[ID].Rotation, BottomRotation, TopRotation, ID, false);
    }
    else
    {
        // TODO
    }
    
    if (RotationOverTimeScalarType == SCALAR_EXACT)
    {
        SimulationStateBuffer[ID].RotationOverTime = ExactRotationOverTime;
    }
    else if (RotationOverTimeScalarType == SCALAR_RANGED)
    {
        SimulationStateBuffer[ID].RotationOverTime = RandomRange(SimulationStateBuffer[ID].RotationOverTime, BottomRotationOverTime, TopRotationOverTime, ID, false);
    }
    else
    {
        // TODO
    }
}

void ResetVelocity(uint ID)
{
    if (VelocityScalarType == SCALAR_EXACT)
    {
        SimulationStateBuffer[ID].Velocity = ExactVelocity;
    }
    else if (VelocityScalarType == SCALAR_RANGED)
    {
        SimulationStateBuffer[ID].Velocity = RandomRange(SimulationStateBuffer[ID].Velocity, BottomVelocity, TopVelocity, ID, false);
    }
    else
    {
        // TODO
    }
}

void ResetLifetime(uint ID)
{
    if(LifetimeScalarType == SCALAR_EXACT)
    {
        SimulationStateBuffer[ID].Current_Max_Life = ExactLifetime;
    }
    else if(LifetimeScalarType == SCALAR_RANGED)
    {
        SimulationStateBuffer[ID].Current_Max_Life = RandomRange(SimulationStateBuffer[ID].Current_Max_Life.y, BottomLifetime, TopLifetime, ID);
    }
    else
    {
        // TODO
    }
}

void ResetColour(uint ID)
{
    if (StartColourScalarType == SCALAR_EXACT)
    {
        SimulationStateBuffer[ID].StartColour = ExactStartColour;
    }
    else if (StartColourScalarType == SCALAR_RANGED)
    {
        SimulationStateBuffer[ID].StartColour = RandomRange(SimulationStateBuffer[ID].StartColour, BottomStartColour, TopStartColour, ID, false);
    }
    else
    {
        // TODO
    }
    
    if(UseEndColour == 0) return;

    if (EndColourScalarType == SCALAR_EXACT)
    {
        SimulationStateBuffer[ID].EndColour = ExactEndColour;
    }
    else if (EndColourScalarType == SCALAR_RANGED)
    {
        SimulationStateBuffer[ID].EndColour = RandomRange(SimulationStateBuffer[ID].EndColour, BottomEndColour, TopEndColour, ID, false);
    }
    else
    {
        // TODO
    }
}

void ResetParticle(uint ID)
{
    ResetScale(ID);
    ResetPosition(ID);
    ResetRotation(ID);
    ResetVelocity(ID);
    ResetLifetime(ID);
    ResetColour(ID);
    
    SimulationStateBuffer[ID].ExternalVelocity  = 0.0f;
    SimulationStateBuffer[ID].SimSpace_RendType = int2(SimulationSpace, RenderType);
}

#endif

void UpdateExternalVelocity(uint ID)
{
    // Gravity
    SimulationStateBuffer[ID].ExternalVelocity.y += GravityForce * DeltaTime;
    
    // Force Fields
    [unroll]
    for (int i = 0; i < CPS_MAX_FORCEFIELD_COUNT; i++)
    {
        if (i >= ForceFieldsCount || UseForceFields == 0) break;

        float3 dir = ForceFieldGeneratorCenterOffsets[i].xyz - SimulationStateBuffer[ID].Position;
        float distLin = length(dir);
        
        SimulationStateBuffer[ID].ExternalVelocity +=
            + DeltaTime
            * ForceFieldIntensities[i]
            * normalize(dir)
            / (1 + pow(distLin, FalloffPowers[ForceFieldTypes[i]]));
    }
    
    // Vector Fields
    if(UseVectorField)
    {
        float3 pos = SimulationStateBuffer[ID].Position * VectorFieldFrequency;

        SimulationStateBuffer[ID].ExternalVelocity +=
            + VectorFieldIntensity
            * (openSimplex2Base(pos).xyz/* - 0.5*/);
    }
}

[numthreads(CPS_GROUP_SIZE, CPS_GROUP_SIZE, 1)]
void MockInit(uint3 id : SV_DispatchThreadID)
{
    uint ID = id.x + id.y * DISPATCH_NUM * CPS_GROUP_SIZE;
    if((int)ID >= MAX_PARTICLE_COUNT) return;
    
    SimulationStateBuffer[ID].Position          = HashNoSine31(PseudoHash(uint2(ID, Seed + 1            )));
    SimulationStateBuffer[ID].StartScale        = HashNoSine31(PseudoHash(uint2(ID, Seed + 121          )));
    SimulationStateBuffer[ID].EndScale          = HashNoSine31(PseudoHash(uint2(ID, Seed + 212          )));
    SimulationStateBuffer[ID].Rotation          = HashNoSine31(PseudoHash(uint2(ID, Seed + 12321        )));
    SimulationStateBuffer[ID].RotationOverTime  = HashNoSine31(PseudoHash(uint2(ID, Seed + 32123        )));
    SimulationStateBuffer[ID].Velocity          = HashNoSine31(PseudoHash(uint2(ID, Seed + 1234321      )));
    SimulationStateBuffer[ID].StartColour       = HashNoSine31(PseudoHash(uint2(ID, Seed + 4321234      )));
    SimulationStateBuffer[ID].EndColour         = HashNoSine31(PseudoHash(uint2(ID, Seed + 4321234 * 2  )));
    
    SimulationStateBuffer[ID].Current_Max_Life  = 0.0f;
}

[numthreads(CPS_GROUP_SIZE, CPS_GROUP_SIZE, 1)]
void MockEmit(uint3 id : SV_DispatchThreadID)
{
    uint ID = id.x + id.y * DISPATCH_NUM * CPS_GROUP_SIZE;
    if
    (
        // Out of scope
        (int)ID                                      >= MAX_PARTICLE_COUNT ||
        
        // Not Dead Yet
        SimulationStateBuffer[ID].Current_Max_Life.x  > 0.0                ||

        // Max Particles Reached
        CurrentParticleCountBuffer[0]                == MAX_PARTICLE_COUNT

    ) return;
    
    
    int emissionIndex = EmissionAmountCounterBuffer.DecrementCounter();
    
    // Emitted enough already
    if(emissionIndex < 0) return;
    
    // Increment current particle amount
    CurrentParticleCountBuffer.IncrementCounter();
    
    ResetParticle(ID);
}

[numthreads(CPS_GROUP_SIZE, CPS_GROUP_SIZE, 1)]
void MockTick(uint3 id : SV_DispatchThreadID)
{
    uint ID = id.x + id.y * DISPATCH_NUM * CPS_GROUP_SIZE;
    if
    (
        // Out of scope
        (int)ID                                      >= MAX_PARTICLE_COUNT ||

        // Dead
        SimulationStateBuffer[ID].Current_Max_Life.x <= 0.0
        
    ) return;

    // Age it
    SimulationStateBuffer[ID].Current_Max_Life.x -= DeltaTime;
    
    // Rotate it
    SimulationStateBuffer[ID].Rotation += SimulationStateBuffer[ID].RotationOverTime * DeltaTime;
    
    UpdateExternalVelocity(ID);
    
    // Apply Drag to velocity
    // NOTE: Drag will be linear by velocity since there are 2 separate velocity components
    float drag = DragForce * DeltaTime;
    SimulationStateBuffer[ID].Velocity          -= drag * SimulationStateBuffer[ID].Velocity;
    SimulationStateBuffer[ID].ExternalVelocity  -= drag * SimulationStateBuffer[ID].ExternalVelocity;
    
    // Apply velocity
    SimulationStateBuffer[ID].Position += DeltaTime *
    (
        + SimulationStateBuffer[ID].Velocity
        + SimulationStateBuffer[ID].ExternalVelocity
    );
    
    // Remove from the alive pool
    if (SimulationStateBuffer[ID].Current_Max_Life.x <= 0) CurrentParticleCountBuffer.DecrementCounter();
}
